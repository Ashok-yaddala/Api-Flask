name: Deploy Flask App to EKS
on:
 push:
   branches:
     - main
permissions:
 id-token: write
 contents: write
jobs:
 deploy:
   runs-on: ubuntu-latest
   steps:
     - name: Checkout Code
       uses: actions/checkout@v3
     - name: Configure AWS credentials using OIDC
       uses: aws-actions/configure-aws-credentials@v4
       with:
         role-to-assume: arn:aws:iam::173003893026:role/OIDC-github-actions
         aws-region: ap-south-1
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v2
     - name: Create ECR repository if not exists
       run: |
         aws ecr describe-repositories --repository-names flask-app || \
         aws ecr create-repository --repository-name flask-app
     - name: Build, Tag, and Push Image to ECR
       run: |
         IMAGE_TAG=latest
         docker build -t ${{ steps.login-ecr.outputs.registry }}/flask-app:$IMAGE_TAG .
         docker push ${{ steps.login-ecr.outputs.registry }}/flask-app:$IMAGE_TAG
         
     - name: Setup kubectl
       uses: azure/setup-kubectl@v3
       
     - name: Setup Helm
       uses: azure/setup-helm@v3
       
     - name: Update kubeconfig
       run: aws eks update-kubeconfig --region ap-south-1 --name dev-eks
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v2
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
     - name: Deploy Flask App
       run: |
         kubectl apply -f k8s/deployment.yaml
         kubectl apply -f k8s/service.yaml
         kubectl apply -f k8s/ingress.yaml
     - name: Install ALB Ingress Controller
       run: |
         kubectl get deployment -n kube-system aws-load-balancer-controller || echo "Controller not found, proceeding with install"
         helm repo add eks https://aws.github.io/eks-charts
         helm repo update
         helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
           -n kube-system \
           --set clusterName=dev-eks \
           --set serviceAccount.create=true \
           --set serviceAccount.name=aws-load-balancer-controller \
           --set region=ap-south-1 \
           --set vpcId=vpc-063a82b96acf21fe0 \
           --set image.repository=602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-load-balancer-controller
     - name: Wait for Ingress to be ready
       run: |
         echo "Waiting for ALB to be created..."
         for i in {1..30}; do
           ALB=$(kubectl get ingress flask-ingress -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
           if [[ -n "$ALB" ]]; then echo "ALB DNS: http://$ALB"; break; fi
           echo "Still waiting... ($i)"
           sleep 10
         done
